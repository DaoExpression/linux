#	$OpenBSD: pf.conf,v 1.55 2017/12/03 20:40:04 sthen Exp $
#
# See pf.conf(5) and /etc/examples/pf.conf

external="re0" # Connect to ISP Router
gateway="192.168.1.1" # ISP Router IP 
internal="re1" # Internal Network
srvgateway="192.168.10.1" # Internal Network Gateway IP
server="192.168.10.20" # HTTP Server on Local Network
http_ports="{80,443}" # HTTP Ports for Local HTTP Server
ssh_ports="22" # SSH Ports used to connect between machines

set skip on lo # Allow all local(127.0.0.1) connections 
set optimization conservative  
set fingerprints "/etc/pf.os"
set timeout interval 10 
set timeout frag 30
set loginterface egress
set state-policy if-bound

anchor "relayd/*"

table <http> persist counters # Used to store IPs from abused services [HTTP]
table <scanners> persist file "/etc/evil_ips"
#table <authorized> persist file "/etc/users_ip_mac.table"
table <bogons4> persist { \
    0.0.0.0/8, 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, \
    169.254.0.0/16, 172.16.0.0/12, 192.0.2.0/24, 192.168.0.0/16, \
    198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4 }

antispoof quick for { $external, $internal, lo0 } # Block Spoofing for all network cards

block all # Default behavior 
block drop on any from <scanners> to any

block in quick from <http> # quick block against http

block return in on ! lo0 proto tcp to port 6000:6010 # Deny X remote connections
block return out log proto {tcp udp} user _pbuild # Deny _PackageBuild to access internet
# Block TCP ACK FLOOD 
block drop quick proto udp from any to $external # Block all UDP connections against HTTP server 
block drop quick proto udp to $external port 1900 # Block all UDP connections against HTTP server 

block in quick on $external from urpf-failed label uRPF # Block Invalid packages in re0 
block in quick on $internal from urpf-failed label uRPF # Block Invalid packages in re1

block in quick on $external from <bogons4> to any # Block connections from private networks

# Incomming Packages normalization
match in all scrub (no-df random-id max-mss 1440)
# Validate and Monitor packages from LAN
match out on egress inet from !(egress:network) to any nat-to (egress:0)

# Allow Connections from Local-Server $SERVER 
pass in on $external from ($external) to $server keep state
# Allow connections from NTP servers and Domain to synchronize values
pass in quick proto udp to $server port {domain ntp}
# FILTERS 
# HTTP max connections filtering
pass in on $external proto tcp to $server port $http_ports flags S/SA synproxy state (max-src-conn 1, max-src-conn-rate 10/1, overload <http> flush global)
# Allow HTTP connections and redirect them to $SERVER
pass in on egress proto tcp from any to any port $http_ports rdr-to $server

# Allow authorized machins filter by MAC address
#pass in log quick from <authorized> to any

# Allow all OUT connections
# Allow between (re0 and re1 network cards) 
pass out on $external proto { tcp udp icmp } from $internal to $external keep state 
pass on $internal from $server to any
pass on $internal from any to $server
# Allow main card to access internet
pass out inet 
pass out on egress proto { tcp udp icmp } keep state 
